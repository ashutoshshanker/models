package models

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"time"
)

type ConfigObj interface {
	UnmarshalObject(data []byte) (ConfigObj, error)
	CreateDBTable(dbHdl *sql.DB) error
	StoreObjectInDb(dbHdl *sql.DB) (int64, error)
	DeleteObjectFromDb(objKey string, dbHdl *sql.DB) error
	GetKey() (string, error)
	GetSqlKeyStr(string) (string, error)
	GetObjectFromDb(objKey string, dbHdl *sql.DB) (ConfigObj, error)
	CompareObjectsAndDiff(updateKeys map[string]bool, dbObj ConfigObj) ([]bool, error)
	MergeDbAndConfigObj(dbObj ConfigObj, attrSet []bool) (ConfigObj, error)
	UpdateObjectInDb(dbV4Route ConfigObj, attrSet []bool, dbHdl *sql.DB) error
	GetAllObjFromDb(dbHdl *sql.DB) ([]ConfigObj, error)
	GetBulkObjFromDb(startIndex int64, count int64, dbHdl *sql.DB) (error, int64, int64, bool, []ConfigObj)
}

//
// This file is handcoded for now. Eventually this would be generated by yang compiler//

type User struct {
	BaseObj
	UserName    string `SNAPROUTE: "KEY"`
	Password    string
	Description string
	Privilege   string
}

func (obj User) UnmarshalObject(body []byte) (ConfigObj, error) {
	var userObj User
	var err error
	if len(body) > 0 {
		if err = json.Unmarshal(body, &userObj); err != nil {
			fmt.Println("### Trouble in unmarshaling User from Json", body)
		}
	}

	return userObj, err
}

type UserState struct {
	BaseObj
	UserName      string `SNAPROUTE: "KEY"`
	LastLoginTime time.Time
	LastLoginIp   string
	NumAPICalled  uint32
}

func (obj UserState) UnmarshalObject(body []byte) (ConfigObj, error) {
	var userStateObj UserState
	var err error
	if len(body) > 0 {
		if err = json.Unmarshal(body, &userStateObj); err != nil {
			fmt.Println("### Trouble in unmarshaling UserState from Json", body)
		}
	}

	return userStateObj, err
}

type Login struct {
	BaseObj
	UserName string
	Password string
}

func (obj Login) UnmarshalObject(body []byte) (ConfigObj, error) {
	var loginObj Login
	var err error
	if len(body) > 0 {
		if err = json.Unmarshal(body, &loginObj); err != nil {
			fmt.Println("### Trouble in unmarshaling Login from Json", body)
		}
	}

	return loginObj, err
}

type Logout struct {
	BaseObj
	UserName  string
	SessionId uint32
}

func (obj Logout) UnmarshalObject(body []byte) (ConfigObj, error) {
	var logoutObj Logout
	var err error
	if len(body) > 0 {
		if err = json.Unmarshal(body, &logoutObj); err != nil {
			fmt.Println("### Trouble in unmarshaling Logout from Json", body)
		}
	}

	return logoutObj, err
}

type SystemStatusState struct {
	BaseObj
	Name           string `SNAPROUTE: "KEY"`
	Ready          bool
	Reason         string
	UpTime         string
	NumCreateCalls string
	NumDeleteCalls string
	NumUpdateCalls string
	NumGetCalls    string
	NumActionCalls string
}

func (obj SystemStatusState) UnmarshalObject(body []byte) (ConfigObj, error) {
	var systemStatus SystemStatusState
	var err error
	if len(body) > 0 {
		if err = json.Unmarshal(body, &systemStatus); err != nil {
			fmt.Println("### Trouble in unmarshaling SystemStatus from Json", body)
		}
	}

	return systemStatus, err
}
